# Concurrency Across Tasks: Arcs and Mutexes
## The Arc Module

The previous section of this tutorial explored Rust's tasks. Tasks as we have seen them don't really do well with sharing data. There are often instances where we may want multiple tasks spawned which reference, or even modify, some data. These utilities can be accomplished through the use of the `Arc` and `Mutex`.

### Basic Arc Use
The [sync::arc module](http://doc.rust-lang.org/sync/struct.Arc.html) is a wrapper for any data type to be shared between tasks. An `Arc<T>` is a shared immutable state. When spawning tasks that want to reference the same data, using the `clone()` function creates a new copy of the `Arc` which references the same underlying data. To access this data, the variable for the `Arc` is simply dereferenced like a standard `&` reference. Once the data of cloned Arc is referenced, that copy can only be referenced within the current scope. Trying to reference it out of that scope will result in a compilation error as follows.  

<pre><code>arcs.rs:19:21: 19:28 <span style = "color:red;">error:</span> use of moved value: `taskArc`
arcs.rs:19         let foo = *taskArc;
</code></pre>

The underlying data is not ever changed for an `Arc`. This allows sending a new arc to a task, and having it access the same data. These `Arcs` can only hold immutable data. We will be looking at a variation of the `Arc` that allows mutability in a bit. The following bit of code creates a vector of integers, wraps them in an `Arc`, and then prints out each value within a separate task.

//inline 05/arcs.rs 1

## Using a Mutex
The [sync::Mutex module](http://doc.rust-lang.org/sync/struct.Mutex.html) is a structure to be wrapped with an `Arc`. A `Mutex` allows for mutable data to be shared between tasks, without a risk of cocurrency issues. 

To access the values inside of a `Mutex`, the wrapping `Arc` requires a new copy to be cloned, as with the normal `Arc`. To access the data within the `Mutex`, however, the `lock()` function must be called upon the `Arc`. This returns the `Mutex`, and  gives the current task exclusive access to the contents of the `Mutex` until it goes out of scope. Much like the `Arc`, the value within the `Mutex` is accessed with the dereferencing `*` operator. 

As said before, the `Mutex` will give exclusive access to the contents until out of scope. This is accomplished by blocking any subsequent calls of `lock()` in other tasks until the `Mutex` is freed up again. The Rust compiler prevents explicit deallocation, so in order to assure useful cocurrency, it may be useful to wrap any references to the value in the `Mutex` in its own block. This forces it out of scope when finished. This can be seen in the example below. Without this block:

//inline 05/arcCollatz.rs 2

Any other spawned tasks would not be able to access the contents of the `Mutex` until the previous task was complete, defeating the purpose of multitasking entirely. Below is a full example of using a `Mutex` wrapped with an `Arc` to pass a single integer around mutiple tasks, and calling our `collatz(x: int)` function from the first tutorial section in each separate task.

//inline 05/arcCollatz.rs 1